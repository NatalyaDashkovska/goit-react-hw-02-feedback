{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Stastictics/Statistics.jsx","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","props","initialValue","leaveFeedback","event","setState","prevState","target","textContent","countTotalFeedback","this","countPositiveFeedbackPercentage","toFixed","Object","keys","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNASeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCKUC,EATS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GACjB,OACE,wBAAQC,KAAK,SAAsBC,QAASJ,EAA5C,SACGE,GADwBA,OCElBG,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KCgBCC,EAhBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAOD,EACL,gCACE,sCAASH,KACT,yCAAYC,KACZ,qCAAQC,KAEPE,EAAqB,GACpB,sDAAyBA,EAAzB,UAIJ,cAAC,EAAD,CAAcN,QAAQ,uBCTpBO,E,4MAQJC,MAAQ,CACNN,KAAM,EAAKO,MAAMC,aACjBP,QAAS,EAAKM,MAAMC,aACpBN,IAAK,EAAKK,MAAMC,c,EAElBC,cAAgB,SAAAC,GACd,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAMG,OAAOC,YAAcF,EAAUF,EAAMG,OAAOC,aAAe,O,4CAItE,WACE,IAAMC,EACJC,KAAKV,MAAMJ,IAAMc,KAAKV,MAAML,QAAUe,KAAKV,MAAMN,KAC7CiB,GACHD,KAAKV,MAAMN,KAAOe,EACnB,KACAG,QAAQ,GACJ3B,EAAU4B,OAAOC,KAAKJ,KAAKV,OACjC,OACE,qCACE,cAAC,EAAD,CAASlB,MAAM,6BAAf,SACE,cAAC,EAAD,CACEG,QAASA,EACTC,gBAAiBwB,KAAKP,kBAG1B,cAAC,EAAD,CAASrB,MAAM,aAAf,SACE,cAAC,EAAD,CACEY,KAAMgB,KAAKV,MAAMN,KACjBC,QAASe,KAAKV,MAAML,QACpBC,IAAKc,KAAKV,MAAMJ,IAChBC,MAAOY,EACPX,mBAAoBa,a,GAzCdI,aAAZhB,EACGiB,aAAe,CACpBd,aAAc,GA+CHH,QClDfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ca275c06.chunk.js","sourcesContent":["import React from 'react';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import React from 'react';\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => {\n    return (\n      <button type=\"button\" key={option} onClick={onLeaveFeedback}>\n        {option}\n      </button>\n    );\n  });\n};\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;\n","import React from 'react';\nimport Notification from '../Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return total ? (\n    <div>\n      <p>Good {good}</p>\n      <p>Neutral {neutral}</p>\n      <p>Bad {bad}</p>\n\n      {positivePercentage > 0 && (\n        <div>Positive feedback: {positivePercentage}%</div>\n      )}\n    </div>\n  ) : (\n    <Notification message=\"No feedback given\" />\n  );\n};\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Stastictics';\n\nclass App extends Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  static propTypes = {\n    initialValue: PropTypes.number,\n  };\n  state = {\n    good: this.props.initialValue,\n    neutral: this.props.initialValue,\n    bad: this.props.initialValue,\n  };\n  leaveFeedback = event => {\n    this.setState(prevState => ({\n      [event.target.textContent]: prevState[event.target.textContent] + 1,\n    }));\n  };\n\n  render() {\n    const countTotalFeedback =\n      this.state.bad + this.state.neutral + this.state.good;\n    const countPositiveFeedbackPercentage = (\n      (this.state.good / countTotalFeedback) *\n      100\n    ).toFixed(2);\n    const options = Object.keys(this.state);\n    return (\n      <>\n        <Section title=\"Please leave your feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.leaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          ></Statistics>\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}